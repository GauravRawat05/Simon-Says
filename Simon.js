let gameSeq = []; // Array to store the sequence of colors generated by the game
let userSeq = []; // Array to store the sequence of colors entered by the user
let level = 0; // Variable to keep track of the current level
let gameStarted = false; // Flag to check if the game has started
let btns = ["red", "yellow", "green", "blue"]; // Array of button colors

// Event listener for keypress to start the game
document.addEventListener("keypress", () => {
  if (gameStarted === false) {
    // console.log("Game Started");
    gameStarted = true;
    lvlUp(); // Start the game by leveling up
  }
});

// Function to level up the game
function lvlUp() {
  level++; // Increment the level
  document.querySelector("p").innerHTML = `Level - ${level}`; // Update the level display
  userSeq = []; // Reset user sequence for the new level
  Flashbtn(); // Flash a new button
}

// Function to flash a random button
function Flashbtn() {
  let randIdx = Math.floor(Math.random() * 4); // Generate a random index
  let randColor = btns[randIdx]; // Get the color corresponding to the random index
  gameSeq.push(randColor); // Add the color to the game sequence
  // console.log(gameSeq);

  let btn = document.querySelector(`.${randColor}`); // Select the button with the random color
  btn.classList.add("flash"); // Add the flash class to the button
  setTimeout(() => {
    btn.classList.remove("flash"); // Remove the flash class after 250ms
  }, 250);
}

// Attach event listeners to buttons once
document.querySelectorAll('.btn').forEach((e) => {
  e.addEventListener('click', (event) => {
    event.target.classList.add("flash"); // Add flash class to the clicked button
    setTimeout(() => {
      event.target.classList.remove("flash"); // Remove flash class after 250ms
    }, 250);

    let userColor = event.target.id; // Get the id of the clicked button
    userSeq.push(userColor); // Add the color to the user sequence
    // console.log(userSeq);
    checkAns(userSeq.length - 1); // Check the user's answer
  });
});

// Function to check the user's answer
function checkAns(idx) {
  if (userSeq[idx] === gameSeq[idx]) { // Check if the user's input matches the game sequence
    if (userSeq.length === gameSeq.length) { // Check if the user has completed the sequence
      setTimeout(() => {
        lvlUp(); // Level up after a short delay
      }, 1000);
    }
  } else {
    gameOver(); // End the game if the user's input is incorrect
  }
}

let scores = [];

// Function to handle game over
function gameOver() {
  scores.push(level);
  // console.log(scores);
  let highestScore = Math.max(...scores);
  
  let body = document.querySelector('body');
  body.classList.add("red"); // Flash the screen red
  setTimeout(() => {
    body.classList.remove("red"); // Remove the red flash after 250ms
  }, 250);
  // console.log('Game Over');
  document.querySelector("p").innerHTML = `Game Over! Your Score was - ${level}! Press any key to restart.`; // Display game over message
  document.querySelector('h3').innerHTML = `Highest Score - ${highestScore}`
  gameStarted = false; // Reset game started flag
  gameSeq = []; // Reset game sequence
  userSeq = []; // Reset user sequence
  level = 0; // Reset level
  
}
